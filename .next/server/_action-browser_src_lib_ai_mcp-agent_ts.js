/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_action-browser_src_lib_ai_mcp-agent_ts";
exports.ids = ["_action-browser_src_lib_ai_mcp-agent_ts"];
exports.modules = {

/***/ "(action-browser)/./src/lib/ai/mcp-agent.ts":
/*!*********************************!*\
  !*** ./src/lib/ai/mcp-agent.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApexMCPAgent: () => (/* binding */ ApexMCPAgent)\n/* harmony export */ });\n/* harmony import */ var _google_genai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/genai */ \"(action-browser)/./node_modules/@google/genai/dist/node/index.mjs\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/index.js */ \"(action-browser)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_stdio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/stdio.js */ \"(action-browser)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js\");\n// Apex with MCP Server Integration\n\n\n\nclass ApexMCPAgent {\n    constructor(apiKey, config = {}){\n        this.mcpClients = new Map();\n        this.availableTools = new Map();\n        const key = apiKey || process.env.GEMINI_API_KEY;\n        if (!key) {\n            throw new Error('GEMINI_API_KEY must be provided or set in environment');\n        }\n        this.ai = new _google_genai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenAI({\n            apiKey: key\n        });\n        this.config = {\n            model: 'gemini-2.5-flash',\n            temperature: 0.7,\n            maxTokens: 8192,\n            thinkingBudget: 24576,\n            workingDirectory: process.cwd(),\n            mcpServers: {\n                // Web Automation\n                puppeteer: {\n                    command: 'npx',\n                    args: [\n                        '-y',\n                        '@modelcontextprotocol/server-puppeteer'\n                    ]\n                },\n                playwright: {\n                    command: 'npx',\n                    args: [\n                        '@playwright/mcp@latest',\n                        '--headless'\n                    ]\n                },\n                // System & Memory\n                memory: {\n                    command: 'npx',\n                    args: [\n                        '-y',\n                        '@modelcontextprotocol/server-memory'\n                    ]\n                },\n                filesystem: {\n                    command: 'npx',\n                    args: [\n                        '-y',\n                        '@modelcontextprotocol/server-filesystem',\n                        config.workingDirectory || process.cwd()\n                    ]\n                },\n                time: {\n                    command: 'uvx',\n                    args: [\n                        'mcp-server-time',\n                        '--local-timezone=America/New_York'\n                    ]\n                },\n                // Development Tools\n                github: {\n                    command: 'npx',\n                    args: [\n                        '-y',\n                        '@modelcontextprotocol/server-github'\n                    ],\n                    env: {\n                        GITHUB_PERSONAL_ACCESS_TOKEN: process.env.GITHUB_PERSONAL_ACCESS_TOKEN || ''\n                    }\n                },\n                // AI Enhancement\n                'sequential-thinking': {\n                    command: 'npx',\n                    args: [\n                        '-y',\n                        '@modelcontextprotocol/server-sequential-thinking'\n                    ]\n                }\n            },\n            ...config\n        };\n    }\n    async initialize() {\n        console.log('üöÄ Initializing Apex with MCP servers...\\n');\n        for (const [serverName, serverConfig] of Object.entries(this.config.mcpServers)){\n            try {\n                await this.connectMCPServer(serverName, serverConfig);\n            } catch (error) {\n                console.warn(`‚ö†Ô∏è  Could not connect to ${serverName}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n        console.log(`‚úÖ Initialized with ${this.mcpClients.size} MCP servers\\n`);\n        this.logAvailableTools();\n    }\n    async connectMCPServer(name, config) {\n        const transport = new _modelcontextprotocol_sdk_client_stdio_js__WEBPACK_IMPORTED_MODULE_2__.StdioClientTransport({\n            command: config.command,\n            args: config.args,\n            env: {\n                ...process.env,\n                ...config.env\n            }\n        });\n        const client = new _modelcontextprotocol_sdk_client_index_js__WEBPACK_IMPORTED_MODULE_1__.Client({\n            name: `apex-${name}-client`,\n            version: '1.0.0'\n        }, {\n            capabilities: {\n                resources: {},\n                tools: {},\n                prompts: {}\n            }\n        });\n        await client.connect(transport);\n        this.mcpClients.set(name, client);\n        // Get available tools from this server\n        const toolsResponse = await client.listTools();\n        toolsResponse.tools.forEach((tool)=>{\n            this.availableTools.set(tool.name, {\n                ...tool,\n                server: name\n            });\n        });\n        console.log(`‚úÖ Connected to ${name} (${toolsResponse.tools.length} tools)`);\n    }\n    logAvailableTools() {\n        console.log('üîß Available Tools:');\n        for (const [toolName, toolInfo] of this.availableTools.entries()){\n            console.log(`   ‚Ä¢ ${toolName} (${toolInfo.server}): ${toolInfo.description || 'No description'}`);\n        }\n        console.log('');\n    }\n    async executeMCPTool(toolName, parameters) {\n        const toolInfo = this.availableTools.get(toolName);\n        if (!toolInfo) {\n            throw new Error(`Tool ${toolName} not available`);\n        }\n        const client = this.mcpClients.get(toolInfo.server);\n        if (!client) {\n            throw new Error(`MCP client for ${toolInfo.server} not connected`);\n        }\n        try {\n            const result = await client.callTool({\n                name: toolName,\n                arguments: parameters\n            });\n            return result;\n        } catch (error) {\n            console.error(`Error executing ${toolName}:`, error);\n            throw error;\n        }\n    }\n    async cleanup() {\n        console.log('\\nüßπ Cleaning up MCP connections...');\n        for (const [name, client] of this.mcpClients.entries()){\n            try {\n                await client.close();\n                console.log(`‚úÖ Closed ${name}`);\n            } catch (error) {\n                console.warn(`‚ö†Ô∏è  Error closing ${name}:`, error);\n            }\n        }\n        this.mcpClients.clear();\n        this.availableTools.clear();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/ai/mcp-agent.ts\n");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

};
;